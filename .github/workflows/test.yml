name: test
on: [ 'pull_request' ]
env:
  LOG_LEVEL: notice

jobs:

  # Test that packages depending on us still work
  dependents:
    strategy:
      fail-fast: false
      matrix:
        swiftver:
          - 5.2
          - 5.3
        dbimage:
          - postgres:13
          - postgres:12
          - postgres:11
        dependent:
          - postgres-kit
          - fluent-postgres-driver
    container: swift:${{ matrix.swiftver }}-focal
    runs-on: ubuntu-latest
    services:
      psql-a:
        image: ${{ matrix.dbimage }}
        env:
          POSTGRES_USER: vapor_username
          POSTGRES_DB: vapor_database
          POSTGRES_PASSWORD: vapor_password
      psql-b:
        image: ${{ matrix.dbimage }}
        env:
          POSTGRES_USER: vapor_username
          POSTGRES_DB: vapor_database
          POSTGRES_PASSWORD: vapor_password
    steps:
      - name: Check out package
        uses: actions/checkout@v2
        with:
          path: package
      - name: Check out dependent
        uses: actions/checkout@v2
        with:
          repository: vapor/${{ matrix.dependent }}
          path: dependent
      - name: Use local package
        run: swift package edit postgres-nio --path ../package
        working-directory: dependent
      - name: Run tests with Thread Sanitizer
        run: swift test --enable-test-discovery --sanitize=thread
        working-directory: dependent
        env:
          POSTGRES_HOSTNAME: psql-a
          POSTGRES_HOSTNAME_A: psql-a
          POSTGRES_HOSTNAME_B: psql-b

  # Run package tests on Linux Swift runners against supported PSQL versions
  linux:
    strategy:
      fail-fast: false
      matrix:
        dbimage:
          - postgres:13
          - postgres:12
          - postgres:11
        dbauth:
          - trust
          - md5
          - scram-sha-256
        swiftver:
          - swift:5.2
          - swift:5.3
          #- swiftlang/swift:nightly-5.3
          #- swiftlang/swift:nightly-master
        swiftos:
          #- xenial
          - bionic
          - focal
          #- centos7
          #- centos8
          - amazonlinux2
    container: ${{ format('{0}-{1}', matrix.swiftver, matrix.swiftos) }}
    runs-on: ubuntu-latest
    services:
      psql:
        image: ${{ matrix.dbimage }}
        env:
          POSTGRES_USER: vapor_username
          POSTGRES_DB: vapor_database
          POSTGRES_PASSWORD: vapor_password
          POSTGRES_HOST_AUTH_METHOD: ${{ matrix.dbauth }}
    steps:
      #- name: SPM is incompatible with CentOS 7
      #  if: ${{ matrix.swiftos == 'centos7' }}
      #  run: |
      #    yum install -y make libcurl-devel
      #    git clone https://github.com/git/git -bv2.28.0 --depth 1 && cd git
      #    make prefix=/usr -j all install NO_OPENSSL=1 NO_EXPAT=1 NO_TCLTK=1 NO_GETTEXT=1 NO_PERL=1
      - name: Check out code
        uses: actions/checkout@v2
      - name: Run tests with Thread Sanitizer
        run: swift test --enable-test-discovery --sanitize=thread
        env: { POSTGRES_HOSTNAME: 'psql' }

  # Run package tests on macOS against supported PSQL versions
  macos:
    strategy:
      fail-fast: false
      matrix:
        dbauth:
          - trust
          - md5
          - scram-sha-256
        formula:
          - postgresql@11
          - postgresql@12
          - postgresql@13
    runs-on: macos-latest
    steps:
      - name: Select latest available Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with: { 'xcode-version': latest }
      - name: Install Postgres, setup DB and auth, and wait for server start
        run: |
          export PATH="/usr/local/opt/${{ matrix.formula }}/bin:$PATH" PGDATA=/tmp/vapor-postgres-test
          brew install ${{ matrix.formula }}
          initdb --locale=C -A ${{ matrix.dbauth }} -U vapor_username --pwfile=<(echo vapor_password)
          pg_ctl start --wait
        timeout-minutes: 5
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests with Thread Sanitizer
        run: swift test --enable-test-discovery --sanitize=thread
        env: { POSTGRES_DATABASE: 'postgres' }
