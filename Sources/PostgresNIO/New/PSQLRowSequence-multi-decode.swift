/// NOTE: THIS FILE IS AUTO-GENERATED BY dev/generate-psqlrow-multi-decode.sh

#if swift(>=5.5) && canImport(_Concurrency)
extension PSQLRowSequence {
    @inlinable
    public func decode<T0: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0)> {
        self.map { row in
            try row.decode(T0.self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1)> {
        self.map { row in
            try row.decode((T0, T1).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2)> {
        self.map { row in
            try row.decode((T0, T1, T2).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, T9: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, T9: PSQLDecodable, T10: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, T9: PSQLDecodable, T10: PSQLDecodable, T11: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, T9: PSQLDecodable, T10: PSQLDecodable, T11: PSQLDecodable, T12: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, T9: PSQLDecodable, T10: PSQLDecodable, T11: PSQLDecodable, T12: PSQLDecodable, T13: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).self, context: context, file: file, line: line)
        }
    }

    @inlinable
    public func decode<T0: PSQLDecodable, T1: PSQLDecodable, T2: PSQLDecodable, T3: PSQLDecodable, T4: PSQLDecodable, T5: PSQLDecodable, T6: PSQLDecodable, T7: PSQLDecodable, T8: PSQLDecodable, T9: PSQLDecodable, T10: PSQLDecodable, T11: PSQLDecodable, T12: PSQLDecodable, T13: PSQLDecodable, T14: PSQLDecodable, JSONDecoder: PostgresJSONDecoder>(_: (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) -> AsyncThrowingMapSequence<PSQLRowSequence, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> {
        self.map { row in
            try row.decode((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).self, context: context, file: file, line: line)
        }
    }
}
#endif
